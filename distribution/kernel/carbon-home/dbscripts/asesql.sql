--create table REG_CLUSTER_LOCK
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_CLUSTER_LOCK') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_CLUSTER_LOCK (
	REG_LOCK_NAME VARCHAR (20) NOT NULL,
	REG_LOCK_STATUS VARCHAR (20),
	REG_LOCKED_TIME DATETIME,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (REG_LOCK_NAME)
)
")
;

--create table REG_LOG
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_LOG') AND type = 'U')
EXECUTE("
CREATE TABLE REG_LOG (
	REG_LOG_ID INTEGER IDENTITY NOT NULL,
	REG_PATH TEXT, -- WAS: VARCHAR (2000),
	REG_USER_ID VARCHAR (31) NOT NULL,
	REG_LOGGED_TIME DATETIME NOT NULL,
	REG_ACTION INTEGER NOT NULL,
	REG_ACTION_DATA VARCHAR (500),
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (REG_LOG_ID, REG_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_LOG_IND_BY_REG_LOGTIME')
	CREATE INDEX REG_LOG_IND_BY_REG_LOGTIME ON REG_LOG(REG_LOGGED_TIME, REG_TENANT_ID)
;

--create table regpath
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_PATH') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_PATH(
	REG_PATH_ID INTEGER IDENTITY NOT NULL,
	REG_PATH_VALUE TEXT NOT NULL, -- WAS: VARCHAR(2000)
	REG_PATH_PARENT_ID INTEGER,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_PATH PRIMARY KEY(REG_PATH_ID, REG_TENANT_ID)
)
")
;

-- In ASE, we cannot use this index since it has to be a text column... It won't likely
-- matter, since the query would likely table scan on small tables (< 50000 rows).
--IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_PATH_IND_BY_PATH_VALUE')
--	CREATE INDEX REG_PATH_IND_BY_PATH_VALUE ON REG_PATH(REG_PATH_VALUE, REG_TENANT_ID)
--;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_PATH_IND_BY_PARENT_ID')
	CREATE INDEX REG_PATH_IND_BY_PARENT_ID ON REG_PATH(REG_PATH_PARENT_ID, REG_TENANT_ID)
;

--create table REG_CONTENT
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_CONTENT') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_CONTENT (
	REG_CONTENT_ID INTEGER IDENTITY NOT NULL,
	REG_CONTENT_DATA IMAGE, -- WAS: VARBINARY(MAX),
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_CONTENT PRIMARY KEY(REG_CONTENT_ID, REG_TENANT_ID)
)
")
;

--create table REG_CONTENT_HISTORY
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_CONTENT_HISTORY') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_CONTENT_HISTORY (
	REG_CONTENT_ID INTEGER NOT NULL,
	REG_CONTENT_DATA IMAGE, -- WAS: VARBINARY(MAX),
	REG_DELETED   SMALLINT,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_CONTENT_HISTORY PRIMARY KEY(REG_CONTENT_ID, REG_TENANT_ID)
)
")
;

--create table REG_RESOURCE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE') AND type = 'U')
EXECUTE("
CREATE TABLE REG_RESOURCE (
	REG_PATH_ID         INTEGER NOT NULL,
	REG_NAME            VARCHAR(256),
	REG_VERSION          INTEGER IDENTITY NOT NULL,
	REG_MEDIA_TYPE      VARCHAR(500),
	REG_CREATOR         VARCHAR(31) NOT NULL,
	REG_CREATED_TIME    DATETIME NOT NULL,
	REG_LAST_UPDATOR    VARCHAR(31),
	REG_LAST_UPDATED_TIME   DATETIME NOT NULL,
	REG_DESCRIPTION     TEXT, -- WAS: VARCHAR(1000),
	REG_CONTENT_ID      INTEGER,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	REG_UUID VARCHAR(100) NOT NULL,
	CONSTRAINT PK_REG_RESOURCE PRIMARY KEY(REG_VERSION, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID)
)
")
;

-- In ASE, add the constraint directly in the table create
--if not exists (SELECT * FROM SYS.FOREIGN_KEYS WHERE id = object_id(N'[DBO].[REG_RESOURCE_FK_BY_PATH_ID]') AND PARENT_id = object_id(N'[DBO].[REG_RESOURCE]'))
--ALTER TABLE REG_RESOURCE ADD CONSTRAINT REG_RESOURCE_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID);

-- In ASE, add the constraint directly in the table create
--if not exists (select * from SYS.FOREIGN_KEYS where id = object_id('REG_RESOURCE_FK_BY_CONTENT_ID') AND PARENT_id = object_id('REG_RESOURCE'))
--alter table REG_RESOURCE add constraint REG_RESOURCE_FK_BY_CONTENT_ID foreign key (REG_CONTENT_ID, REG_TENANT_ID) references REG_CONTENT (REG_CONTENT_ID, REG_TENANT_ID);

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_IND_BY_NAME')
	CREATE INDEX REG_RESOURCE_IND_BY_NAME ON REG_RESOURCE(REG_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_IND_BY_PATH_ID_NAME')
	CREATE INDEX REG_RESOURCE_IND_BY_PATH_ID_NAME ON REG_RESOURCE(REG_PATH_ID, REG_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_IND_BY_UUID')
	CREATE INDEX REG_RESOURCE_IND_BY_UUID ON REG_RESOURCE(REG_UUID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_IND_BY_TENANT')
	CREATE INDEX REG_RESOURCE_IND_BY_TENANT ON REG_RESOURCE(REG_TENANT_ID, REG_UUID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_IND_BY_TYPE')
	CREATE INDEX REG_RESOURCE_IND_BY_TYPE ON REG_RESOURCE(REG_TENANT_ID, REG_MEDIA_TYPE)
;

--create table REG_RESOURCE_HISTORY
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE_HISTORY') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_RESOURCE_HISTORY (
	REG_PATH_ID         INTEGER NOT NULL,
	REG_NAME            VARCHAR(256),
	REG_VERSION         INTEGER NOT NULL,
	REG_MEDIA_TYPE      VARCHAR(500),
	REG_CREATOR         VARCHAR(31) NOT NULL,
	REG_CREATED_TIME    DATETIME NOT NULL,
	REG_LAST_UPDATOR    VARCHAR(31),
	REG_LAST_UPDATED_TIME  DATETIME NOT NULL,
	REG_DESCRIPTION     TEXT, -- WAS: VARCHAR(1000),
	REG_CONTENT_ID      INTEGER,
	REG_DELETED         SMALLINT,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	REG_UUID VARCHAR(100) NOT NULL,
	CONSTRAINT PK_REG_RESOURCE_HISTORY PRIMARY KEY(REG_VERSION, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_HIST_FK_BY_PATHID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_HIST_FK_BY_CONTENT_ID FOREIGN KEY (REG_CONTENT_ID, REG_TENANT_ID) REFERENCES REG_CONTENT_HISTORY (REG_CONTENT_ID, REG_TENANT_ID)
)
")
;

-- In ASE, add the constraint directly in the table create
--if not exists (select * from SYS.FOREIGN_KEYS where object_id = object_id('REG_RESOURCE_HIST_FK_BY_PATHID') AND parent_object_id = object_id('REG_RESOURCE_HISTORY'))
--alter table REG_RESOURCE_HISTORY add constraint REG_RESOURCE_HIST_FK_BY_PATHID foreign key (REG_PATH_ID, REG_TENANT_ID) references REG_PATH (REG_PATH_ID, REG_TENANT_ID);

-- In ASE, add the constraint directly in the table create
--if not exists (select * from SYS.FOREIGN_KEYS where object_id = object_id('REG_RESOURCE_HIST_FK_BY_CONTENT_ID') AND parent_object_id = object_id('REG_RESOURCE_HISTORY'))
--alter table REG_RESOURCE_HISTORY add constraint REG_RESOURCE_HIST_FK_BY_CONTENT_ID foreign key (REG_CONTENT_ID, REG_TENANT_ID) references REG_CONTENT_HISTORY (REG_CONTENT_ID, REG_TENANT_ID);

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_HISTORY_IND_BY_NAME')
	CREATE INDEX REG_RESOURCE_HISTORY_IND_BY_NAME ON REG_RESOURCE_HISTORY(REG_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_HISTORY_IND_BY_PATH_ID_NAME')
	CREATE INDEX REG_RESOURCE_HISTORY_IND_BY_PATH_ID_NAME ON REG_RESOURCE_HISTORY(REG_PATH_ID, REG_NAME, REG_TENANT_ID)
;

--create table REG_COMMENT

IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_COMMENT') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_COMMENT (
	REG_ID      INTEGER IDENTITY NOT NULL,
	REG_COMMENT_TEXT      VARCHAR(500) NOT NULL,
	REG_USER_ID           VARCHAR(31) NOT NULL,
	REG_COMMENTED_TIME    DATETIME NOT NULL,
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_COMMENT PRIMARY KEY(REG_ID, REG_TENANT_ID)
)
")
;

--create table REG_RESOURCE_COMMENT
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE_COMMENT') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_RESOURCE_COMMENT (
	REG_COMMENT_ID          INTEGER NOT NULL,
	REG_VERSION             INTEGER DEFAULT 0,
	REG_PATH_ID             INTEGER,
	REG_RESOURCE_NAME       VARCHAR(256),
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT REG_RESOURCE_COMMENT_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_COMMENT_FK_BY_COMMENT_ID FOREIGN KEY (REG_COMMENT_ID, REG_TENANT_ID) REFERENCES REG_COMMENT (REG_ID, REG_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_COMMENT_IND_BY_PATH_ID_AND_RESOURCE_NAME')
	CREATE INDEX REG_RESOURCE_COMMENT_IND_BY_PATH_ID_AND_RESOURCE_NAME ON REG_RESOURCE_COMMENT(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_COMMENT_IND_BY_VERSION')
	CREATE INDEX REG_RESOURCE_COMMENT_IND_BY_VERSION ON REG_RESOURCE_COMMENT(REG_VERSION, REG_TENANT_ID)
;

--create table  REG_RATING
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RATING') AND type = 'U')
EXECUTE("
CREATE TABLE REG_RATING (
	REG_ID      			INTEGER IDENTITY NOT NULL,
	REG_RATING        INTEGER NOT NULL,
	REG_USER_ID       VARCHAR(31) NOT NULL,
	REG_RATED_TIME    DATETIME NOT NULL,
	REG_TENANT_ID 		INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_RATING PRIMARY KEY(REG_ID, REG_TENANT_ID)
)
")
;

--create table REG_RESOURCE_RATING
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE_RATING') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_RESOURCE_RATING (
	REG_RATING_ID     INTEGER NOT NULL,
	REG_VERSION       INTEGER,
	REG_PATH_ID       INTEGER,
	REG_RESOURCE_NAME VARCHAR(256),
	REG_TENANT_ID 		INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT REG_RESOURCE_RATING_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_RATING_FK_BY_RATING_ID FOREIGN KEY (REG_RATING_ID, REG_TENANT_ID) REFERENCES REG_RATING (REG_ID, REG_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_RATING_IND_BY_PATH_ID_AND_RESOURCE_NAME')
	CREATE INDEX REG_RESOURCE_RATING_IND_BY_PATH_ID_AND_RESOURCE_NAME ON REG_RESOURCE_RATING(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_RATING_IND_BY_VERSION')
	CREATE INDEX REG_RESOURCE_RATING_IND_BY_VERSION ON REG_RESOURCE_RATING(REG_VERSION, REG_TENANT_ID)
;

--create table  REG_TAG
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_TAG') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_TAG (
	REG_ID          INTEGER IDENTITY NOT NULL,
	REG_TAG_NAME    VARCHAR(500) NOT NULL,
	REG_USER_ID     VARCHAR(31) NOT NULL,
	REG_TAGGED_TIME DATETIME NOT NULL,
	REG_TENANT_ID 	INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_TAG PRIMARY KEY(REG_ID, REG_TENANT_ID)
)
")
;

--create table  REG_RESOURCE_TAG
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE_TAG') AND type = 'U')
EXECUTE("
CREATE TABLE   REG_RESOURCE_TAG (
	REG_TAG_ID        INTEGER NOT NULL,
	REG_VERSION       INTEGER DEFAULT 0,
	REG_PATH_ID       INTEGER,
	REG_RESOURCE_NAME VARCHAR(256),
	REG_TENANT_ID 		INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT REG_RESOURCE_TAG_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_TAG_FK_BY_TAG_ID FOREIGN KEY (REG_TAG_ID, REG_TENANT_ID) REFERENCES REG_TAG (REG_ID, REG_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_TAG_IND_BY_PATH_ID_AND_RESOURCE_NAME')
	CREATE INDEX REG_RESOURCE_TAG_IND_BY_PATH_ID_AND_RESOURCE_NAME ON REG_RESOURCE_TAG(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_TAG_IND_BY_VERSION')
	CREATE INDEX REG_RESOURCE_TAG_IND_BY_VERSION ON REG_RESOURCE_TAG(REG_VERSION, REG_TENANT_ID)
;

--create table REG_PROPERTY

IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_PROPERTY') AND type = 'U')
EXECUTE("
CREATE TABLE REG_PROPERTY (
	REG_ID        INTEGER IDENTITY NOT NULL,
	REG_NAME       VARCHAR(100) NOT NULL,
	REG_VALUE        VARCHAR(1000),
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_PROPERTY PRIMARY KEY(REG_ID, REG_TENANT_ID)
)
")
;

--create table REG_RESOURCE_PROPERTY

IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_RESOURCE_PROPERTY') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_RESOURCE_PROPERTY (
	REG_PROPERTY_ID         INTEGER NOT NULL,
	REG_VERSION             INTEGER,
	REG_PATH_ID             INTEGER,
	REG_RESOURCE_NAME       VARCHAR(256),
	REG_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT REG_RESOURCE_PROPERTY_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID),
	CONSTRAINT REG_RESOURCE_PROPERTY_FK_BY_TAG_ID FOREIGN KEY (REG_PROPERTY_ID, REG_TENANT_ID) REFERENCES REG_PROPERTY (REG_ID, REG_TENANT_ID)
)
")
;

-- In ASE, add the constraint directly in the table create
--if not exists (select * from SYS.FOREIGN_KEYS where id = object_id(N'[DBO].REG_RESOURCE_PROPERTY_FK_BY_PATH_ID') AND PARENT_id = object_id(N'[DBO].REG_RESOURCE_PROPERTY'))
--alter table REG_RESOURCE_PROPERTY add constraint REG_RESOURCE_PROPERTY_FK_BY_PATH_ID foreign key (REG_PATH_ID, REG_TENANT_ID) references REG_PATH (REG_PATH_ID, REG_TENANT_ID);

-- In ASE, add the constraint directly in the table create
--if not exists (select * from SYS.FOREIGN_KEYS where id = object_id(N'[DBO].REG_RESOURCE_PROPERTY_FK_BY_TAG_ID') AND PARENT_id = object_id(N'[DBO].REG_RESOURCE_PROPERTY'))
--alter table REG_RESOURCE_PROPERTY add constraint REG_RESOURCE_PROPERTY_FK_BY_TAG_ID foreign key (REG_PROPERTY_ID, REG_TENANT_ID) references REG_PROPERTY (REG_ID, REG_TENANT_ID);

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_PROPERTY_IND_BY_PATH_ID_AND_RESOURCE_NAME')
	CREATE INDEX REG_RESOURCE_PROPERTY_IND_BY_PATH_ID_AND_RESOURCE_NAME ON REG_RESOURCE_PROPERTY(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID)
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_RESOURCE_PROPERTY_IND_BY_VERSION')
	CREATE INDEX REG_RESOURCE_PROPERTY_IND_BY_VERSION ON REG_RESOURCE_PROPERTY(REG_VERSION, REG_TENANT_ID)
;

--create table  REG_ASSOCIATION
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_ASSOCIATION') AND type = 'U')
EXECUTE("
CREATE TABLE  REG_ASSOCIATION (
	REG_ASSOCIATION_ID 		INTEGER IDENTITY NOT NULL,
	REG_SOURCEPATH 				TEXT NOT NULL, -- WAS: VARCHAR(2000)
	REG_TARGETPATH 				TEXT NOT NULL, -- WAS: VARCHAR(2000)
	REG_ASSOCIATION_TYPE 	TEXT NOT NULL, -- WAS: VARCHAR(2000)
	REG_TENANT_ID 				INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (REG_ASSOCIATION_ID, REG_TENANT_ID)
)
")
;

--create table  REG_SNAPSHOT
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('REG_SNAPSHOT') AND type = 'U')
EXECUTE("
CREATE TABLE REG_SNAPSHOT (
	REG_SNAPSHOT_ID 		INTEGER IDENTITY NOT NULL,
	REG_PATH_ID 				INTEGER NOT NULL,
	REG_RESOURCE_NAME   VARCHAR (256),
	REG_RESOURCE_VIDS   IMAGE NOT NULL, -- WAS: VARBINARY(MAX)
	REG_TENANT_ID 			INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_REG_SNAPSHOT PRIMARY KEY(REG_SNAPSHOT_ID, REG_TENANT_ID),
	CONSTRAINT REG_SNAPSHOT_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'REG_SNAPSHOT_IND_BY_PATH_ID_AND_RESOURCE_NAME')
	CREATE INDEX REG_SNAPSHOT_IND_BY_PATH_ID_AND_RESOURCE_NAME ON REG_SNAPSHOT(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID)
;

-- ################################
-- USER MANAGER TABLES
-- ################################

--create table   UM_TENANT_
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_TENANT') AND type = 'U')
EXECUTE("
CREATE TABLE UM_TENANT (
	UM_ID 					INTEGER IDENTITY NOT NULL,
	UM_DOMAIN_NAME	VARCHAR(255) NOT NULL,
	UM_EMAIL 				VARCHAR(255),
	UM_ACTIVE 			BIT DEFAULT 0 NOT NULL,
	UM_CREATED_DATE DATETIME NOT NULL,
	UM_USER_CONFIG 	IMAGE, -- WAS: VARBINARY(MAX),
	PRIMARY KEY (UM_ID),
	UNIQUE (UM_DOMAIN_NAME)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'INDEX_UM_TENANT_UM_DOMAIN_NAME')
	CREATE INDEX INDEX_UM_TENANT_UM_DOMAIN_NAME ON UM_TENANT (UM_DOMAIN_NAME)
;

--create table   UM_USER
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER') AND type = 'U')
EXECUTE("
CREATE TABLE  UM_USER (
	UM_ID 						INTEGER IDENTITY NOT NULL,
	UM_USER_NAME 			VARCHAR(255) NOT NULL,
	UM_USER_PASSWORD 	VARCHAR(255) NOT NULL,
	UM_SALT_VALUE 		VARCHAR(31),
	UM_REQUIRE_CHANGE BIT DEFAULT 0 NOT NULL,
	UM_CHANGED_TIME 	DATETIME NOT NULL,
	UM_TENANT_ID 			INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_ID, UM_TENANT_ID),
	UNIQUE (UM_USER_NAME, UM_TENANT_ID)
)
")
;

--create table   UM_DOMAIN
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_DOMAIN') AND type = 'U')
EXECUTE("
CREATE TABLE UM_DOMAIN(
	UM_DOMAIN_ID INTEGER IDENTITY NOT NULL,
	UM_DOMAIN_NAME VARCHAR(255),
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_DOMAIN_ID, UM_TENANT_ID)
)
")
;

--create table   UM_SYSTEM_USER
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_SYSTEM_USER') AND type = 'U')
EXECUTE("
CREATE TABLE UM_SYSTEM_USER ( 
	UM_ID 						INTEGER IDENTITY NOT NULL, 
	UM_USER_NAME 			VARCHAR(255) NOT NULL, 
	UM_USER_PASSWORD 	VARCHAR(255) NOT NULL,
	UM_SALT_VALUE 		VARCHAR(31),
	UM_REQUIRE_CHANGE BIT DEFAULT 0 NOT NULL,
	UM_CHANGED_TIME		DATETIME NOT NULL,
	UM_TENANT_ID			INTEGER DEFAULT 0 NOT NULL, 
	PRIMARY KEY (UM_ID, UM_TENANT_ID), 
	UNIQUE (UM_USER_NAME, UM_TENANT_ID)
)
")
;

--create table   UM_USER_ATTRIBUTE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER_ATTRIBUTE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_USER_ATTRIBUTE (
	UM_ID 				INTEGER IDENTITY NOT NULL,
	UM_ATTR_NAME 	VARCHAR(255) NOT NULL,
	UM_ATTR_VALUE VARCHAR(1024),
	UM_PROFILE_ID VARCHAR(255),
	UM_USER_ID 		INTEGER,
	UM_TENANT_ID 	INTEGER DEFAULT 0 NOT NULL,
	FOREIGN KEY (UM_USER_ID, UM_TENANT_ID) REFERENCES UM_USER(UM_ID, UM_TENANT_ID),
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'UM_USER_ID_INDEX')
	CREATE INDEX UM_USER_ID_INDEX ON UM_USER_ATTRIBUTE(UM_USER_ID)
;


--create table   UM_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_ROLE (
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_ROLE_NAME VARCHAR(255) NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UM_SHARED_ROLE BIT DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_ID, UM_TENANT_ID),
	UNIQUE (UM_ROLE_NAME, UM_TENANT_ID)
)
")
;

--create table UM_MODULE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_MODULE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_MODULE(
	UM_ID INTEGER  IDENTITY NOT NULL,
	UM_MODULE_NAME VARCHAR(100),
	UNIQUE (UM_MODULE_NAME),
	PRIMARY KEY(UM_ID)
)
")
;

--create table UM_MODULE_ACTIONS
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_MODULE_ACTIONS') AND type = 'U')
EXECUTE("
CREATE TABLE UM_MODULE_ACTIONS(
	UM_ACTION VARCHAR(255) NOT NULL,
	UM_MODULE_ID INTEGER NOT NULL,
	--FOREIGN KEY (UM_MODULE_ID) REFERENCES UM_MODULE(UM_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	PRIMARY KEY(UM_ACTION, UM_MODULE_ID)
)
")
;

--create table UM_PERMISSION
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_PERMISSION') AND type = 'U')
EXECUTE("
CREATE TABLE  UM_PERMISSION (
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_RESOURCE_ID VARCHAR(255) NOT NULL,
	UM_ACTION VARCHAR(255) NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UM_MODULE_ID INTEGER DEFAULT 0,
	UNIQUE (UM_RESOURCE_ID,UM_ACTION, UM_TENANT_ID),
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'INDEX_UM_PERMISSION_UM_RESOURCE_ID_UM_ACTION')
	CREATE INDEX INDEX_UM_PERMISSION_UM_RESOURCE_ID_UM_ACTION ON UM_PERMISSION (UM_RESOURCE_ID, UM_ACTION, UM_TENANT_ID)
;

--create table UM_ROLE_PERMISSION
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ROLE_PERMISSION') AND type = 'U')
EXECUTE("
CREATE TABLE  UM_ROLE_PERMISSION (
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_PERMISSION_ID INTEGER NOT NULL,
	UM_ROLE_NAME VARCHAR(255) NOT NULL,
	UM_IS_ALLOWED SMALLINT NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UM_DOMAIN_ID INTEGER, 
	UNIQUE (UM_PERMISSION_ID, UM_ROLE_NAME, UM_TENANT_ID, UM_DOMAIN_ID),
	--FOREIGN KEY (UM_PERMISSION_ID, UM_TENANT_ID) REFERENCES UM_PERMISSION(UM_ID, UM_TENANT_ID) ON DELETE CASCADE,-- IN ASE, IMPLEMENTED AS TRIGGERS
	--FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID) REFERENCES UM_DOMAIN(UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

--create table UM_USER_PERMISSION
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER_PERMISSION') AND type = 'U')
EXECUTE("
CREATE TABLE  UM_USER_PERMISSION (
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_PERMISSION_ID INTEGER NOT NULL,
	UM_USER_NAME VARCHAR(255) NOT NULL,
	UM_IS_ALLOWED SMALLINT NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UNIQUE (UM_PERMISSION_ID, UM_USER_NAME, UM_TENANT_ID),
	--FOREIGN KEY (UM_PERMISSION_ID, UM_TENANT_ID) REFERENCES UM_PERMISSION(UM_ID, UM_TENANT_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_USER_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE  UM_USER_ROLE (
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_ROLE_ID INTEGER NOT NULL,
	UM_USER_ID INTEGER NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UNIQUE (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID),
	FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_ROLE(UM_ID, UM_TENANT_ID),
	FOREIGN KEY (UM_USER_ID, UM_TENANT_ID) REFERENCES UM_USER(UM_ID, UM_TENANT_ID),
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_SHARED_USER_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_SHARED_USER_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_SHARED_USER_ROLE(
	UM_ROLE_ID INTEGER NOT NULL,
	UM_USER_ID INTEGER NOT NULL,
	UM_USER_TENANT_ID INTEGER NOT NULL,
	UM_ROLE_TENANT_ID INTEGER NOT NULL,
	--FOREIGN KEY(UM_ROLE_ID,UM_ROLE_TENANT_ID) REFERENCES UM_ROLE(UM_ID,UM_TENANT_ID) ON DELETE CASCADE,-- IN ASE, IMPLEMENTED AS TRIGGERS
	--FOREIGN KEY(UM_USER_ID,UM_USER_TENANT_ID) REFERENCES UM_USER(UM_ID,UM_TENANT_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	UNIQUE (UM_USER_ID,UM_ROLE_ID,UM_USER_TENANT_ID, UM_ROLE_TENANT_ID)
)
")
;

-- create table UM_ACCOUNT_MAPPING
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ACCOUNT_MAPPING') AND type = 'U')
EXECUTE("
CREATE TABLE UM_ACCOUNT_MAPPING(
	UM_ID INTEGER IDENTITY,
	UM_USER_NAME VARCHAR(255) NOT NULL,
	UM_TENANT_ID INTEGER NOT NULL,
	UM_USER_STORE_DOMAIN VARCHAR(100),
	UM_ACC_LINK_ID INTEGER NOT NULL,
	UNIQUE (UM_USER_NAME, UM_TENANT_ID, UM_USER_STORE_DOMAIN, UM_ACC_LINK_ID),
	-- FOREIGN KEY (UM_TENANT_ID) REFERENCES UM_TENANT(UM_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	PRIMARY KEY (UM_ID)
)
")
;

-- create table UM_DIALECT
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_DIALECT') AND type = 'U')
EXECUTE("
CREATE TABLE UM_DIALECT(
	UM_ID INTEGER IDENTITY,
	UM_DIALECT_URI VARCHAR(255),
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UNIQUE (UM_DIALECT_URI, UM_TENANT_ID),
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_CLAIM
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_CLAIM') AND type = 'U')
EXECUTE("
CREATE TABLE UM_CLAIM(
	UM_ID INTEGER IDENTITY,
	UM_DIALECT_ID INTEGER,
	UM_CLAIM_URI VARCHAR(255), 
	UM_DISPLAY_TAG VARCHAR(255), 
	UM_DESCRIPTION VARCHAR(255), 
	UM_MAPPED_ATTRIBUTE_DOMAIN VARCHAR(255),
	UM_MAPPED_ATTRIBUTE VARCHAR(255), 
	UM_REG_EX VARCHAR(255), 
	UM_SUPPORTED SMALLINT, 
	UM_REQUIRED SMALLINT, 
	UM_DISPLAY_ORDER INTEGER, 
	UM_CHECKED_ATTRIBUTE SMALLINT,
	UM_READ_ONLY SMALLINT,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UNIQUE (UM_DIALECT_ID, UM_CLAIM_URI, UM_TENANT_ID,UM_MAPPED_ATTRIBUTE_DOMAIN), 
	FOREIGN KEY(UM_DIALECT_ID, UM_TENANT_ID) REFERENCES UM_DIALECT(UM_ID, UM_TENANT_ID), 
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_PROFILE_CONFIG
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_PROFILE_CONFIG') AND type = 'U')
EXECUTE("
CREATE TABLE UM_PROFILE_CONFIG(
	UM_ID INTEGER IDENTITY,
	UM_DIALECT_ID INTEGER, 
	UM_PROFILE_NAME VARCHAR(255), 
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	FOREIGN KEY(UM_DIALECT_ID, UM_TENANT_ID) REFERENCES UM_DIALECT(UM_ID, UM_TENANT_ID), 
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_CLAIM_BEHAVIOR
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_CLAIM_BEHAVIOR') AND type = 'U')
EXECUTE("
CREATE TABLE UM_CLAIM_BEHAVIOR(
	UM_ID INTEGER IDENTITY,
	UM_PROFILE_ID INTEGER, 
	UM_CLAIM_ID INTEGER, 
	UM_BEHAVIOUR SMALLINT,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL, 
	FOREIGN KEY(UM_PROFILE_ID, UM_TENANT_ID) REFERENCES UM_PROFILE_CONFIG(UM_ID, UM_TENANT_ID), 
	FOREIGN KEY(UM_CLAIM_ID, UM_TENANT_ID) REFERENCES UM_CLAIM(UM_ID, UM_TENANT_ID), 
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_HYBRID_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_HYBRID_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_HYBRID_ROLE(
	UM_ID INTEGER IDENTITY,
	UM_ROLE_NAME VARCHAR(255),
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;
-- create table UM_HYBRID_USER_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_HYBRID_USER_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_HYBRID_USER_ROLE(
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_USER_NAME VARCHAR(255),
	UM_ROLE_ID INTEGER NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UM_DOMAIN_ID INTEGER,
	UNIQUE (UM_USER_NAME, UM_ROLE_ID, UM_TENANT_ID, UM_DOMAIN_ID),
	--FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID, UM_TENANT_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	--FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID) REFERENCES UM_DOMAIN(UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE, -- IN ASE, IMPLEMENTED AS TRIGGERS
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_SYSTEM_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_SYSTEM_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_SYSTEM_ROLE(
	UM_ID INTEGER IDENTITY NOT NULL,
	UM_ROLE_NAME VARCHAR(255),
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

IF NOT EXISTS (SELECT 1 FROM sysindexes WHERE name = 'SYSTEM_ROLE_IND_BY_RN_TI')
	CREATE INDEX SYSTEM_ROLE_IND_BY_RN_TI ON UM_SYSTEM_ROLE(UM_ROLE_NAME, UM_TENANT_ID)
;

-- create table UM_SYSTEM_USER_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_SYSTEM_USER_ROLE') AND type = 'U')
EXECUTE("
CREATE TABLE UM_SYSTEM_USER_ROLE(
	UM_ID INTEGER IDENTITY,
	UM_USER_NAME VARCHAR(255),
	UM_ROLE_ID INTEGER NOT NULL,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	UNIQUE (UM_USER_NAME, UM_ROLE_ID, UM_TENANT_ID),
	FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_SYSTEM_ROLE(UM_ID, UM_TENANT_ID),
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;

-- create table UM_HYBRID_USER_ROLE
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_HYBRID_REMEMBER_ME') AND type = 'U')
EXECUTE("
CREATE TABLE UM_HYBRID_REMEMBER_ME(
	UM_ID INTEGER IDENTITY,
	UM_USER_NAME VARCHAR(255) NOT NULL,
	UM_COOKIE_VALUE VARCHAR(1024),
	UM_CREATED_TIME DATETIME,
	UM_TENANT_ID INTEGER DEFAULT 0 NOT NULL,
	PRIMARY KEY (UM_ID, UM_TENANT_ID)
)
")
;
--------------------------------------------------------------------------------
-- ASE doesn't support on delete cascade foreign key table constraints,
-- so we have to implement these using triggers instead.
--------------------------------------------------------------------------------
-- ASE ON DELETE CASCADE RI triggers
--------------------------------------------------------------------------------

-- create trigger UM_DOMAIN_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_DOMAIN_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_DOMAIN_DEL_TR ON UM_DOMAIN
   FOR DELETE AS
DELETE UM_ROLE_PERMISSION
  FROM deleted d, UM_ROLE_PERMISSION r
 WHERE d.UM_DOMAIN_ID = r.UM_DOMAIN_ID
   AND d.UM_TENANT_ID = r.UM_TENANT_ID
DELETE UM_HYBRID_USER_ROLE
  FROM deleted d, UM_HYBRID_USER_ROLE r
 WHERE d.UM_DOMAIN_ID = r.UM_DOMAIN_ID
   AND d.UM_TENANT_ID = r.UM_TENANT_ID
")
;

-- create trigger UM_MODULE_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_MODULE_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_MODULE_DEL_TR ON UM_MODULE
   FOR DELETE AS
DELETE UM_MODULE_ACTIONS
  FROM deleted d, UM_MODULE_ACTIONS r
 WHERE d.UM_ID = r.UM_MODULE_ID
")
;

-- create trigger UM_ROLE_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ROLE_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_ROLE_DEL_TR ON UM_ROLE
   FOR DELETE AS
DELETE UM_SHARED_USER_ROLE
  FROM deleted d, UM_SHARED_USER_ROLE r
 WHERE d.UM_ID = r.UM_ROLE_ID
   AND d.UM_TENANT_ID = r.UM_ROLE_TENANT_ID
")
;

-- create trigger UM_TENANT_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_TENANT_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_TENANT_DEL_TR ON UM_TENANT
   FOR DELETE AS
DELETE UM_ACCOUNT_MAPPING
  FROM deleted d, UM_ACCOUNT_MAPPING r
 WHERE d.UM_ID = r.UM_TENANT_ID
")
;

-- create trigger UM_HYBRID_ROLE_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_HYBRID_ROLE_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_HYBRID_ROLE_DEL_TR ON UM_HYBRID_ROLE
   FOR DELETE AS
DELETE UM_HYBRID_USER_ROLE
  FROM deleted d, UM_HYBRID_USER_ROLE r
 WHERE d.UM_ID = r.UM_ROLE_ID
   AND d.UM_TENANT_ID = r.UM_TENANT_ID
")
;

-- create trigger UM_USER_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_USER_DEL_TR ON UM_USER
   FOR DELETE AS
DELETE UM_SHARED_USER_ROLE
  FROM deleted d, UM_SHARED_USER_ROLE r
 WHERE d.UM_ID = r.UM_USER_ID
   AND d.UM_TENANT_ID = r.UM_USER_TENANT_ID
")
;

-- create trigger UM_PERMISSION_DEL_TR to handle RI cascade deletion
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_PERMISSION_DEL_TR'))
EXECUTE("
CREATE TRIGGER UM_PERMISSION_DEL_TR ON UM_PERMISSION
   FOR DELETE AS
DELETE UM_ROLE_PERMISSION
  FROM deleted d, UM_ROLE_PERMISSION r
 WHERE d.UM_ID = r.UM_PERMISSION_ID
   AND d.UM_TENANT_ID = r.UM_TENANT_ID
DELETE UM_USER_PERMISSION
  FROM deleted d, UM_USER_PERMISSION r
 WHERE d.UM_ID = r.UM_PERMISSION_ID
   AND d.UM_TENANT_ID = r.UM_TENANT_ID
")
;

--------------------------------------------------------------------------------
-- ASE foreign key RI constraint triggers for ON DELETE CASCADE
--------------------------------------------------------------------------------

-- create trigger UM_MODULE_ACTIONS_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_MODULE_ACTIONS_TR'))
EXECUTE("
CREATE TRIGGER UM_MODULE_ACTIONS_TR ON UM_MODULE_ACTIONS
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_MODULE_ACTIONS'
SET @FOREIGN_TABLE_NAME = 'UM_MODULE'
IF ( SELECT COUNT(*) FROM inserted i, UM_MODULE r
      WHERE i.UM_MODULE_ID = r.UM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

-- create trigger UM_USER_PERMISSION_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_USER_PERMISSION_TR'))
EXECUTE("
CREATE TRIGGER UM_USER_PERMISSION_TR ON UM_USER_PERMISSION
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_USER_PERMISSION'
SET @FOREIGN_TABLE_NAME = 'UM_PERMISSION'
IF ( SELECT COUNT(*) FROM inserted i, UM_PERMISSION r
      WHERE i.UM_PERMISSION_ID = r.UM_ID
        AND i.UM_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

-- create trigger UM_HYBRID_USER_ROLE_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_HYBRID_USER_ROLE_TR'))
EXECUTE("
CREATE TRIGGER UM_HYBRID_USER_ROLE_TR ON UM_HYBRID_USER_ROLE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_HYBRID_USER_ROLE'
SET @FOREIGN_TABLE_NAME = 'UM_HYBRID_ROLE'
IF ( SELECT COUNT(*) FROM inserted i, UM_HYBRID_ROLE r
      WHERE i.UM_ROLE_ID = r.UM_ID
        AND i.UM_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
SET @FOREIGN_TABLE_NAME = 'UM_DOMAIN'
IF ( SELECT COUNT(*) FROM inserted i, UM_DOMAIN r
      WHERE i.UM_DOMAIN_ID = r.UM_DOMAIN_ID
        AND i.UM_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

-- create trigger UM_ACCOUNT_MAPPING_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ACCOUNT_MAPPING_TR'))
EXECUTE("
CREATE TRIGGER UM_ACCOUNT_MAPPING_TR ON UM_ACCOUNT_MAPPING
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_ACCOUNT_MAPPING'
SET @FOREIGN_TABLE_NAME = 'UM_TENANT'
IF ( SELECT COUNT(*) FROM inserted i, UM_TENANT r
      WHERE i.UM_TENANT_ID = r.UM_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

-- create trigger UM_SHARED_USER_ROLE_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_SHARED_USER_ROLE_TR'))
EXECUTE("
CREATE TRIGGER UM_SHARED_USER_ROLE_TR ON UM_SHARED_USER_ROLE
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_SHARED_USER_ROLE'
SET @FOREIGN_TABLE_NAME = 'UM_ROLE'
IF ( SELECT COUNT(*) FROM inserted i, UM_ROLE r
      WHERE i.UM_ROLE_ID = r.UM_ID
        AND i.UM_ROLE_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
SET @FOREIGN_TABLE_NAME = 'UM_USER'
IF ( SELECT COUNT(*) FROM inserted i, UM_USER r
      WHERE i.UM_USER_ID = r.UM_ID
        AND i.UM_USER_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

-- create trigger UM_ROLE_PERMISSION_TR to handle foreign key RI constraint for delete cascade support
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE id = object_id('UM_ROLE_PERMISSION_TR'))
EXECUTE("
CREATE TRIGGER UM_ROLE_PERMISSION_TR ON UM_ROLE_PERMISSION
   FOR INSERT,UPDATE AS
DECLARE @ROWCOUNT INT, @DB_NAME VARCHAR(255), @TABLE_NAME VARCHAR(255), @FOREIGN_TABLE_NAME VARCHAR(255)
SET @ROWCOUNT = @@rowcount
SET @DB_NAME = db_name()
SET @TABLE_NAME = 'UM_ROLE_PERMISSION'
SET @FOREIGN_TABLE_NAME = 'UM_PERMISSION'
IF ( SELECT COUNT(*) FROM inserted i, UM_PERMISSION r
      WHERE i.UM_PERMISSION_ID = r.UM_ID
        AND i.UM_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
SET @FOREIGN_TABLE_NAME = 'UM_DOMAIN'
IF ( SELECT COUNT(*) FROM inserted i, UM_DOMAIN r
      WHERE i.UM_DOMAIN_ID = r.UM_DOMAIN_ID
        AND i.UM_TENANT_ID = r.UM_TENANT_ID ) != @ROWCOUNT
  ROLLBACK TRIGGER WITH RAISERROR 99999
  ""Foreign key constraint violation occurred, dbname = '%1!', table name = '%2!', foreign table name = '%3!'"", @DB_NAME, @TABLE_NAME, @FOREIGN_TABLE_NAME
")
;

